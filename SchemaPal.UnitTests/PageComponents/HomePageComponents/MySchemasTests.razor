@using FluentAssertions
@using FluentResults
@using SchemaPal.DataTransferObjects
@using SchemaPal.Helpers.SchemaMakerHelpers
@using SchemaPal.PageComponents.HomePageComponents
@using SchemaPal.SchemaElements
@using SchemaPal.Services.SchemaMakerServices
@using SchemaPal.Services.HelperServices
@using SchemaPal.Services.UserServices
@using Moq
@using TimeZoneConverter

@inherits ComponentTestsBase
@code {
    private IRenderedComponent<MySchemas> _component;

    [Fact]
    public async Task GivenUserWithNoSavedSchemas_WhenRenderingComponent_ThenDisplayCorrectMessage()
    {
        // Given
        SchemaPalApiServiceMock.Setup(service => service.GetDatabaseSchemasForLoggedInUser())
            .ReturnsAsync(Result.Ok(new List<ShortSchemaRecord>()));

        // When
        _component = RenderComponent<MySchemas>();

        // Then
        var messageElement = _component.Find(".message");
        Assert.Equal("Nije spremljena nijedna shema.", messageElement.TextContent);
    }

    [Fact]
    public async Task GivenSchemasFromApi_WhenRenderingComponent_ThenDisplayCorrectText()
    {
        // Given
        var firstSchemaLastSaved = DateTime.UtcNow;
        var secondSchemaLastSaved = DateTime.UtcNow.AddDays(-1);
        var testSchemas = new List<ShortSchemaRecord>
        {
            new ShortSchemaRecord { Id = Guid.NewGuid(), Name = "Schema 1", LastSaved = firstSchemaLastSaved },
            new ShortSchemaRecord { Id = Guid.NewGuid(), Name = "Schema 2", LastSaved = secondSchemaLastSaved }
        };
        SchemaPalApiServiceMock.Setup(service => service.GetDatabaseSchemasForLoggedInUser())
            .ReturnsAsync(Result.Ok(testSchemas));

        // When
        _component = RenderComponent<MySchemas>();

        // Then
        var schemaElements = _component.FindAll(".schema-item");
        Assert.Equal(2, schemaElements.Count);

        var croatianTimeZone = TZConvert.GetTimeZoneInfo("Europe/Zagreb");

        Assert.Contains("Schema 1", schemaElements[0].TextContent);
        var firstSchemaLastSavedCroatianTime = TimeZoneInfo.ConvertTimeFromUtc(firstSchemaLastSaved, croatianTimeZone);
        Assert.Contains($"Zadnje ažurirano: {firstSchemaLastSavedCroatianTime.ToString("dd.MM.yyyy. HH:mm")}h", schemaElements[0].TextContent);

        Assert.Contains("Schema 2", schemaElements[1].TextContent);
        var secondSchemaLastSavedCroatianTime = TimeZoneInfo.ConvertTimeFromUtc(secondSchemaLastSaved, croatianTimeZone);
        Assert.Contains($"Zadnje ažurirano: {secondSchemaLastSavedCroatianTime.ToString("dd.MM.yyyy. HH:mm")}h", schemaElements[1].TextContent);
    }

    [Fact]
    public async Task GivenFailedResponseFromApi_WhenRenderingComponent_ThenShowCorrectMessage()
    {
        // Given
        var expectedErrorMessage = "Failed to load schemas";
        SchemaPalApiServiceMock.Setup(service => service.GetDatabaseSchemasForLoggedInUser())
            .ReturnsAsync(Result.Fail<List<ShortSchemaRecord>>(new Error(expectedErrorMessage)));

        ResultProcessorMock.Setup(processor => processor.ProcessFailedResult(It.IsAny<Result<List<ShortSchemaRecord>>>()))
            .ReturnsAsync("Failed to load schemas");

        // When
        _component = RenderComponent<MySchemas>();

        // Then
        var messageElement = _component.Find(".message");
        Assert.Equal(expectedErrorMessage, messageElement.TextContent);
    }

    [Fact]
    public async Task GivenUserSchema_WhenDeleting_ThenConfirmationMessageIsDisplayed()
    {
        // Given
        var schemaIdToDelete = Guid.NewGuid();
        var testSchemas = new List<ShortSchemaRecord>
        {
            new ShortSchemaRecord { Id = schemaIdToDelete, Name = "Schema To Delete", LastSaved = DateTime.UtcNow }
        };
        SchemaPalApiServiceMock.Setup(service => service.GetDatabaseSchemasForLoggedInUser())
            .ReturnsAsync(Result.Ok(testSchemas));
        SchemaPalApiServiceMock.Setup(service => service.DeleteDatabaseSchema(schemaIdToDelete))
            .ReturnsAsync(Result.Ok());

        // When
        _component = RenderComponent<MySchemas>();
        var deleteButton = _component.Find("button[title='Obriši shemu']");
        await deleteButton.ClickAsync(new MouseEventArgs());

        // Then
        SchemaPalApiServiceMock.Verify(service => service.DeleteDatabaseSchema(schemaIdToDelete), Times.Once);
        var messageElement = _component.Find(".message");
        Assert.Equal("Shema je uspješno obrisana.", messageElement.TextContent);
    }
}