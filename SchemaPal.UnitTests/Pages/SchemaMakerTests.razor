@using FluentAssertions
@using SchemaPal.Helpers.SchemaMakerHelpers
@using SchemaPal.Pages
@using SchemaPal.SchemaElements
@using SchemaPal.Services.SchemaMakerServices
@using SchemaPal.Services.HelperServices
@using SchemaPal.Services.UserServices
@using Moq

@inherits ComponentTestsBase
@code
{
    private readonly Mock<ISchemaInjectionService> mockSchemaInjectionService = new Mock<ISchemaInjectionService>();

    public SchemaMakerTests()
    {
        Services.AddSingleton(mockSchemaInjectionService.Object);
    }

    [Fact]
    public void GivenSchemaMakerPage_WhenRendering_ThenShouldContainLayoutGrid()
    {
        var component = Render(@<SchemaMaker/>);

        var markup = component.Markup;

        markup.Should().Contain("layout-grid");
    }

    [Fact]
    public void GivenInjectedSchema_WhenRenderingSchemaMakerPage_ThenPopSchemaSuccessfully()
    {
        var schemaId = Guid.NewGuid();
        var schemaName = "test_schema_name";
        var schema = new DatabaseSchema();
        var injectedSchema = (schemaId, schemaName, schema);
        mockSchemaInjectionService.Setup(s => s.PopSchema()).Returns(injectedSchema);

        var component = RenderComponent<SchemaMaker>();

        component.Instance.SchemaId.Should().Be(schemaId);
        component.Instance.SchemaName.Should().Be(schemaName);
        component.Instance.DatabaseSchema.Should().Be(schema);
    }

    [Fact]
    public void GivenNoInjectedSchema_WhenRenderingSchemaMakerPage_ThenSetDefaultSchemaValuesToPage()
    {
        var injectedSchema = (Guid.Empty, string.Empty, (DatabaseSchema)null);
        mockSchemaInjectionService.Setup(s => s.PopSchema()).Returns(injectedSchema);

        var component = RenderComponent<SchemaMaker>();

        component.Instance.SchemaId.Should().Be(Guid.Empty);
        component.Instance.SchemaName.Should().Be(SchemaMakerConstants.DefaultNewSchemaName);
        component.Instance.DatabaseSchema.Should().NotBeNull();
    }
}