@using SchemaPal.DataTransferObjects.API;
@using SchemaPal.Services;
@using SchemaPal.Services.SchemaMakerServices;
@using System.Net

@inject NavigationManager _navigationManager
@inject ISchemaPalApiService _schemaPalApiService
@inject IUserSessionService _userSessionService
@inject IResultProcessor _resultProcessor
@inject ISchemaInjectionService _schemaInjectionService

<p style="display: @MessageDisplay">@Message</p>
<div class="my-schemas">
    @foreach (var schema in this.UserSchemas)
    {
        <div class="schema-item" @onclick="() => OpenUserSchema(schema.Id)">
            <h4><strong>@schema.Name</strong> (Zadnje ažurirano @schema.LastSaved)</h4>
        </div>
    }
</div>

@code {
    private List<ShortSchemaRecord> UserSchemas = new List<ShortSchemaRecord>();

    private string MessageDisplay = "none";
    private string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await SetData();
    }

    private async Task SetData()
    {
        var result = await _schemaPalApiService.GetDatabaseSchemasForLoggedInUser();

        if (result.IsSuccess)
        {
            MessageDisplay = "none";
            Message = string.Empty;
            UserSchemas = result.Value;

            return;
        }

        MessageDisplay = "block";
        Message = await _resultProcessor.ProcessFailedResult(result);
        UserSchemas = [];
    }

    private async Task OpenUserSchema(Guid schemaId)
    {
        await _schemaInjectionService.PushSchemaFromAPI(schemaId);
        _navigationManager.NavigateTo("/schema-maker");
    }
}
