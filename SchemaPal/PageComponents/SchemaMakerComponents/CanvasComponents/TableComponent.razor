@using Index = SchemaPal.SchemaElements.Index
@using System.Text
@using SchemaPal.Enums
@using SchemaPal.Enums.EnumTranslators
@using SchemaPal.Helpers.SchemaMakerHelpers
@using SchemaPal.PageComponents.SchemaMakerComponents.CanvasComponents
@using SchemaPal.SchemaElements
@using SchemaPal.Services.SchemaMakerServices

@inject IStyleService _styleService

<div class="table-wrapper" style="top: @this.Table.TopPx; left: @this.Table.LeftPx;">
    <div class="connection-border">
        @foreach (var connectionPoint in this.DatabaseSchema.ConnectionPoints.Where(cp => cp.TableId == this.Table.Id))
        {
            <div class="connection-point"
                 style="left: @connectionPoint.ConnectionPointLeftCoordinatePx;
                        top: @connectionPoint.ConnectionPointTopCoordinatePx;
                        background-color: @(this.DatabaseSchema.ConnectionPointColors.GetValueOrDefault(connectionPoint.UniqueIdentifier));"
                 @onmouseover="() => SetConnectionPointColorOnMouseOver(connectionPoint.UniqueIdentifier)"
                 @onmouseout="() => SetConnectionPointColorOnMouseOut(connectionPoint.UniqueIdentifier)"
                 @onclick="() => ConnectionPointClick(connectionPoint.UniqueIdentifier)">
            </div>
        }
    </div>

    <div class="table"
         style="width: @SchemaMakerConstants.TableWidthPx;
                padding: @SchemaMakerConstants.TablePaddingPx;
                font-size: @SchemaMakerConstants.TableFontSizePx;
                opacity: @(this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation ? 0.7 : 1);
                pointer-events: @(this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation ? "none" : "auto");"
         draggable="true"
         @ondragstart="(e => OnTableDragStart(e, this.Table.Id))">
        <strong>@this.Table.Name</strong>
        @foreach (var column in this.Table.Columns)
        {
            <div class="column"
                 style="margin-top: @SchemaMakerConstants.ColumnTopMarginPx;
                        padding: @SchemaMakerConstants.ColumnPaddingPx;
                        font-size: @SchemaMakerConstants.ColumnFontSizePx;">
                <strong>@column.Name</strong>
                <span class="properties">@column.ColumnProperties</span>
            </div>
        }
        @foreach (var index in this.Table.Indexes)
        {
            <div class="index">
                @GenerateFullIndexName(index)
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public DatabaseSchema DatabaseSchema { get; set; }
    [Parameter] public Table Table { get; set; }

    [Parameter] public DragAndDropHelper DragAndDropHelper { get; set; }
    [Parameter] public RelationshipCreationHelper RelationshipCreationHelper { get; set; }

    [Parameter] public EventCallback OnConnectionPointClicked { get; set; }
    [Parameter] public EventCallback OnUpdateState { get; set; }

    private async Task SetConnectionPointColorOnMouseOver(string uniqueIdentifier)
    {
        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation
            && this.RelationshipCreationHelper.StartingConnectionPointId.Equals(uniqueIdentifier, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Select,
            connectionPointIds: new List<string> { uniqueIdentifier });

        await InvokeAsync(StateHasChanged);
    }

    private async Task SetConnectionPointColorOnMouseOut(string uniqueIdentifier)
    {
        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation
            && this.RelationshipCreationHelper.StartingConnectionPointId.Equals(uniqueIdentifier, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            connectionPointIds: new List<string> { uniqueIdentifier });

        await InvokeAsync(StateHasChanged);
    }

    private async Task ConnectionPointClick(string connectionPointId)
    {
        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.None)
        {
            this.RelationshipCreationHelper.CreationMode = RelationshipCreationMode.StartCreation;
            this.RelationshipCreationHelper.StartingConnectionPointId = connectionPointId;
        }
        else if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation)
        {
            this.RelationshipCreationHelper.CreationMode = RelationshipCreationMode.CloseCreation;
            this.RelationshipCreationHelper.EndingConnectionPointId = connectionPointId;
        }

        await this.OnConnectionPointClicked.InvokeAsync();

        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.CloseCreation)
        {
            this.RelationshipCreationHelper.Reset();
        }

        await this.OnUpdateState.InvokeAsync();
    }

    private void OnTableDragStart(DragEventArgs e, int tableId)
    {
        this.DragAndDropHelper.TableId = tableId;
        this.DragAndDropHelper.StartingClientX = e.ClientX;
        this.DragAndDropHelper.StartingClientY = e.ClientY;
    }

    private string GenerateFullIndexName(Index index)
    {
        var typeAbbreviations = new StringBuilder();

        if (index.KeyType != KeyType.None)
        {
            var keyTypeAbbreviation = KeyTypeTranslator.GetAbbreviation(index.KeyType);
            typeAbbreviations.Append($"{keyTypeAbbreviation} ");
        }

        typeAbbreviations.Append(IndexTypeTranslator.GetAbbreviation(index.Type));

        var indexColumns = this.Table.Columns.Where(c => index.ColumnIds.Contains(c.Id));
        var columnNames = string.Join(", ", indexColumns.Select(c => c.Name));

        return $"{typeAbbreviations} {index.Name} ({columnNames})";
    }
}