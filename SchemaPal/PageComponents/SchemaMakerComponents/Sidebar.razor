@using SchemaPal.DataTransferObjects;
@using SchemaPal.Pages.SchemaMakerHelpers;
@using SchemaPal.PageComponents.SchemaMakerComponents.SidebarComponents;

@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="sidebar">
    <button class="btn" @onclick="NavigateToHome">&#129032 Natrag na glavni izbornik</button>

    <ExpandableSection 
        Title="Tablice" 
        OnAddNewItem="this.AddNewTable" 
        IsExpanded="this.ExpandMenuHelper.AreTablesExpanded" 
        ToggleExpand="ToggleTablesExpanded">
        @foreach (var table in this.Tables)
        {
                <TableComponent Table="@table" 
                    ExpandedTableIds="this.ExpandMenuHelper.ExpandedTableIds"
                    ExpandedColumnsTableIds="this.ExpandMenuHelper.ExpandedColumnsTableIds"
                    ExpandedIndexTableIds="this.ExpandMenuHelper.ExpandedIndexTableIds"
                    ExpandedColumnIds="this.ExpandMenuHelper.ExpandedColumnIds"
                    ExpandedIndexIds="this.ExpandMenuHelper.ExpandedIndexIds"
                    AddNewColumn="this.AddNewColumn"
                    AddNewIndex="this.AddNewIndex"
                    DeleteColumn="this.DeleteColumn"
                    DeleteIndex="this.DeleteIndex"
                    OnIndexColumnsUpdate="this.OnIndexColumnsUpdate"
                    DeleteTable="this.DeleteTable"
                    OnUpdateTable="this.OnUpdateState"/>
        }
    </ExpandableSection>

    <ExpandableSection 
        Title="Veze" 
        IsExpanded="this.ExpandMenuHelper.AreRelationshipsExpanded" 
        ToggleExpand="ToggleRelationshipsExpanded">
        @foreach (var relationship in this.Relationships)
        {
            <RelationshipComponent 
                Relationship="@relationship" 
                RelationshipName="@GenerateRelationshipName(relationship.SourceTableId, relationship.DestinationTableId, relationship.SourceColumnId, relationship.DestinationColumnId)"
                DeleteRelationship="this.DeleteRelationship"
                OnRelationshipUpdate="this.OnUpdateState"/>
        }
    </ExpandableSection>
</div>

@code 
{
    [Parameter] public List<Table> Tables { get; set; }
    [Parameter] public List<Relationship> Relationships { get; set; }

    [Parameter] public Func<int, Task> DeleteTable { get; set; }
    [Parameter] public Func<Task> AddNewTable { get; set; }
    [Parameter] public Func<int, Task> AddNewColumn { get; set; }
    [Parameter] public Func<int, int, Task> DeleteColumn { get; set; }
    [Parameter] public Func<int, Task> AddNewIndex { get; set; }
    [Parameter] public Func<int, int, Task> DeleteIndex { get; set; }
    [Parameter] public Func<List<int>, int, int, Task> OnIndexColumnsUpdate { get; set; }
    [Parameter] public Func<int, Task> DeleteRelationship { get; set; }

    [Parameter] public EventCallback OnUpdateState { get; set; }

    public ExpandMenuHelper ExpandMenuHelper { get; set; } = new ExpandMenuHelper();

    public void ToggleTablesExpanded() => this.ExpandMenuHelper.AreTablesExpanded = !this.ExpandMenuHelper.AreTablesExpanded;

    public void ToggleRelationshipsExpanded() => this.ExpandMenuHelper.AreRelationshipsExpanded = !this.ExpandMenuHelper.AreRelationshipsExpanded;

    private string GenerateRelationshipName(int sourceTableId, 
        int destinationTableId, 
        int sourceColumnId, 
        int destinationColumnId)
    {
        var sourceTable = this.Tables.Find(t => t.Id == sourceTableId);
        var sourceColumnName = sourceTable?.Columns?.Find(c => c.Id == sourceColumnId)?.Name ?? string.Empty;

        var destinationTable = this.Tables.Find(t => t.Id == destinationTableId);
        var destinationColumnName = destinationTable?.Columns?.Find(c => c.Id == destinationColumnId)?.Name ?? string.Empty;

        return $"{sourceColumnName} - {destinationColumnName}";
    }

    private async Task NavigateToHome()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Jeste li sigurni da želite napustiti stranicu?");
        if (confirm)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}