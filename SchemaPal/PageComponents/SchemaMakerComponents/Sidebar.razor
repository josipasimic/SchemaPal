@using SchemaPal.Enums
@using SchemaPal.Helpers.SchemaMakerHelpers
@using SchemaPal.PageComponents.SchemaMakerComponents.SidebarComponents
@using SchemaPal.SchemaElements
@using SchemaPal.Services.HelperServices
@using SchemaPal.SharedComponents

@inject IComponentActionsStorage _componentActionsStorage

<div class="sidebar">
    <button class="btn" @onclick="OnBackToHome">&#129032 Natrag na glavni izbornik</button>

    <SchemaNameInput 
        SchemaName="@this.SchemaName" 
        OnUpdateName="this.OnUpdateName" />

    <ExpandableSection 
        Title="Tablice" 
        OnAddNewItem="this.AddNewTable" 
        IsExpanded="this.ExpandMenuHelper.AreTablesExpanded" 
        ToggleExpand="ToggleTablesExpanded">
        @foreach (var table in this.Tables)
        {
                <TableComponent Table="@table" 
                    ExpandedTableIds="this.ExpandMenuHelper.ExpandedTableIds"
                    ExpandedColumnsTableIds="this.ExpandMenuHelper.ExpandedColumnsTableIds"
                    ExpandedIndexTableIds="this.ExpandMenuHelper.ExpandedIndexTableIds"
                    ExpandedColumnIds="this.ExpandMenuHelper.ExpandedColumnIds"
                    ExpandedIndexIds="this.ExpandMenuHelper.ExpandedIndexIds"
                    AddNewColumn="this.AddNewColumn"
                    AddNewIndex="this.AddNewIndex"
                    DeleteColumn="this.DeleteColumn"
                    DeleteIndex="this.DeleteIndex"
                    OnIndexColumnsUpdate="this.OnIndexColumnsUpdate"
                    DeleteTable="this.DeleteTable"
                    OnUpdateTable="this.OnUpdateState"/>
        }
    </ExpandableSection>

    <ExpandableSection 
        Title="Veze" 
        IsExpanded="this.ExpandMenuHelper.AreRelationshipsExpanded" 
        ToggleExpand="ToggleRelationshipsExpanded">
        @foreach (var relationship in this.Relationships)
        {
            <RelationshipComponent 
                Relationship="@relationship" 
                RelationshipName="@GenerateRelationshipName(relationship.SourceTableId, relationship.DestinationTableId, relationship.SourceColumnId, relationship.DestinationColumnId)"
                DeleteRelationship="this.DeleteRelationship"
                OnRelationshipUpdate="this.OnUpdateState"/>
        }
    </ExpandableSection>
</div>

@code 
{
    [Parameter] public string SchemaName { get; set; }

    [Parameter] public List<Table> Tables { get; set; }
    [Parameter] public List<Relationship> Relationships { get; set; }

    [Parameter] public Func<int, Task> DeleteTable { get; set; }
    [Parameter] public Func<Task> AddNewTable { get; set; }
    [Parameter] public Func<int, Task> AddNewColumn { get; set; }
    [Parameter] public Func<int, int, Task> DeleteColumn { get; set; }
    [Parameter] public Func<int, Task> AddNewIndex { get; set; }
    [Parameter] public Func<int, int, Task> DeleteIndex { get; set; }
    [Parameter] public Func<List<int>, int, int, Task> OnIndexColumnsUpdate { get; set; }
    [Parameter] public Func<int, Task> DeleteRelationship { get; set; }

    [Parameter] public EventCallback<string> OnUpdateName { get; set; }
    [Parameter] public EventCallback OnBackToHome { get; set; }
    [Parameter] public EventCallback OnUpdateState { get; set; }

    private ExpandMenuHelper ExpandMenuHelper { get; set; } = new ExpandMenuHelper();

    protected override void OnInitialized()
    {
        _componentActionsStorage.OnCanvasComponentDoubleClick += ExpandSidebarElement;
    }

    private void ToggleTablesExpanded() => this.ExpandMenuHelper.AreTablesExpanded = !this.ExpandMenuHelper.AreTablesExpanded;

    private void ToggleRelationshipsExpanded() => this.ExpandMenuHelper.AreRelationshipsExpanded = !this.ExpandMenuHelper.AreRelationshipsExpanded;

    private string GenerateRelationshipName(int sourceTableId, 
        int destinationTableId, 
        int sourceColumnId, 
        int destinationColumnId)
    {
        var sourceTable = this.Tables.Find(t => t.Id == sourceTableId);
        var sourceColumnName = sourceTable?.Columns?.Find(c => c.Id == sourceColumnId)?.Name ?? string.Empty;

        var destinationTable = this.Tables.Find(t => t.Id == destinationTableId);
        var destinationColumnName = destinationTable?.Columns?.Find(c => c.Id == destinationColumnId)?.Name ?? string.Empty;

        return $"{sourceTable?.Name ?? string.Empty}.{sourceColumnName} ⇋ {destinationTable?.Name ?? string.Empty}.{destinationColumnName}";
    }

    private async Task ExpandSidebarElement(int elementId, SidebarExpandableElementType elementType)
    {
        SidebarExpandableElement element;

        switch (elementType)
        {
            case SidebarExpandableElementType.Table:
                var table = this.Tables.Find(t => t.Id == elementId);
                if (table is null)
                {
                    return;
                }
                element = table;
                this.ExpandMenuHelper.AreTablesExpanded = true;
                this.ExpandMenuHelper.ExpandedTableIds.Add(elementId);
                break;
            case SidebarExpandableElementType.Column:
                var column = this.Tables.SelectMany(t => t.Columns).FirstOrDefault(c => c.Id == elementId);
                if (column is null)
                {
                    return;
                }
                element = column;
                this.ExpandMenuHelper.AreTablesExpanded = true;
                this.ExpandMenuHelper.ExpandedColumnsTableIds.Add(column.TableId);
                this.ExpandMenuHelper.ExpandedColumnIds.Add(elementId);
                break;
            case SidebarExpandableElementType.Index:
                var index = this.Tables.SelectMany(t => t.Indexes).FirstOrDefault(i => i.Id == elementId);
                if (index is null)
                {
                    return;
                }
                element = index;
                this.ExpandMenuHelper.AreTablesExpanded = true;
                this.ExpandMenuHelper.ExpandedIndexTableIds.Add(index.TableId);
                this.ExpandMenuHelper.ExpandedIndexIds.Add(elementId);
                break;
            case SidebarExpandableElementType.Relationship:
                var relationship = this.Relationships.Find(t => t.Id == elementId);
                if (relationship is null)
                {
                    return;
                }
                element = relationship;
                this.ExpandMenuHelper.AreRelationshipsExpanded = true;
                break;
            default:
                return;
        }

        await HighlightSidebarExpandableElement(element);
    }

    private async Task HighlightSidebarExpandableElement(SidebarExpandableElement element)
    {
        element.BackgroundColorOnSidebar = SchemaMakerConstants.HighlightSidebarBackgroundColor;
        await InvokeAsync(StateHasChanged);

        await Task.Delay(1000);

        element.BackgroundColorOnSidebar = SchemaMakerConstants.DefaultSidebarBackgroundColor;
        await InvokeAsync(StateHasChanged);
    }
}