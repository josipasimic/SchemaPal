@page "/schema-maker"

@using FluentResults
@using SchemaPal.DataTransferObjects
@using SchemaPal.Enums
@using SchemaPal.Enums.EnumTranslators
@using SchemaPal.Helpers.SchemaMakerHelpers
@using SchemaPal.PageComponents.SchemaMakerComponents
@using SchemaPal.SchemaElements
@using SchemaPal.Services.HelperServices
@using SchemaPal.Services.SchemaMakerServices
@using SchemaPal.Services.UserServices
@using SchemaPal.SharedComponents

@inject NavigationManager _navigationManager
@inject ISchemaObjectFactory _schemaObjectFactory
@inject ISchemaInjectionService _schemaInjectionService
@inject ISchemaPalApiService _schemaPalApiService
@inject IJsonConverter _jsonConverter
@inject IResultProcessor _resultProcessor
@inject IStyleService _styleService

<ModalWindow 
    Message="@this.UserMessage"
    ButtonMode="@this.ModalWindowButtonMode"
    OnAccept="@this.OnAccept"
    OnCancel="@this.OnCancel"/>

<div class="layout-grid" 
     style="pointer-events: @(string.IsNullOrEmpty(this.UserMessage) ? "auto" : "none");">
    <Sidebar
        SchemaName="@this.SchemaName"
        OnUpdateName="UpdateSchemaName"
        Tables="@this.DatabaseSchema.Tables"
        AddNewTable="AddNewTable"
        DeleteTable="DeleteTable"
        AddNewColumn="AddNewColumn"
        DeleteColumn="DeleteColumn"
        AddNewIndex="AddNewIndex"
        DeleteIndex="DeleteIndex"
        OnIndexColumnsUpdate="UpdateColumnsOnIndex"
        Relationships="@this.DatabaseSchema.Relationships"
        DeleteRelationship="DeleteRelationship"
        OnUpdateState="StateHasChanged"
        OnBackToHome="OnBackToHome">
    </Sidebar>

    <CanvasContainer
        DatabaseSchema="this.DatabaseSchema"
        RelationshipCreationHelper="this.RelationshipCreationHelper"
        OnRelationshipDrawing="AddNewRelationship"
        OnSaveSchema="SaveSchema"
        OnUpdateState="StateHasChanged">
    </CanvasContainer>
</div>

@code {
    private Guid SchemaId = Guid.Empty;
    private string SchemaName = SchemaMakerConstants.DefaultNewSchemaName;
    private DatabaseSchema DatabaseSchema = new DatabaseSchema();

    private RelationshipCreationHelper RelationshipCreationHelper = new RelationshipCreationHelper();

    #region modal window

    private string UserMessage = string.Empty;
    private ModalWindowButtonMode ModalWindowButtonMode = ModalWindowButtonMode.Accept;
    private EventCallback OnAccept = EventCallback.Empty;
    private EventCallback OnCancel = EventCallback.Empty;

    private void OpenModalWindow(
        string userMessage,
        EventCallback onAccept,
        ModalWindowButtonMode windowButtonMode = ModalWindowButtonMode.Accept,
        EventCallback? onCancel = null)
    {
        this.UserMessage = userMessage;
        this.ModalWindowButtonMode = windowButtonMode;
        this.OnAccept = onAccept;
        this.OnCancel = onCancel ?? EventCallback.Empty;
    }

    private void CloseModalWindow()
    {
        this.UserMessage = string.Empty;
        this.ModalWindowButtonMode = ModalWindowButtonMode.Accept;
        this.OnAccept = EventCallback.Empty;
        this.OnCancel = EventCallback.Empty;
    }

    #endregion

    protected override void OnInitialized()
    {
        var injectedSchema = _schemaInjectionService.PopSchema();
        if (injectedSchema.Schema != null)
        {
            this.SchemaId = injectedSchema.Id;
            this.SchemaName = injectedSchema.Name;
            this.DatabaseSchema = injectedSchema.Schema;

            _schemaObjectFactory.SetWithExistingSchema(this.DatabaseSchema);

            return;
        }

        this.SchemaId = Guid.Empty;
        this.SchemaName = SchemaMakerConstants.DefaultNewSchemaName;
        this.DatabaseSchema = new DatabaseSchema();

        _schemaObjectFactory.Reset();
    }

    #region kreiranje objekata (dodavanje novih tablica, stupaca, indeksa, veza)

    private async Task AddNewTable()
    {
        var newTableId = _schemaObjectFactory.CreateNewTable(this.DatabaseSchema);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Create,
            tableIds: new HashSet<int> { newTableId });

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNewColumn(int tableId)
    {
        _schemaObjectFactory.CreateNewColumn(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: new HashSet<int> { tableId });

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNewIndex(int tableId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.CreateNewIndex(table);

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateColumnsOnIndex(List<int> selectedColumnIds, int tableId, int indexId)
    {
        if (selectedColumnIds is null)
        {
            return;
        }

        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.UpdateColumnsOnIndex(table, indexId, selectedColumnIds);

        await InvokeAsync(StateHasChanged);
    }

    private void AddNewRelationship()
    {
        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation)
        {
            var startingConnectionPoint = this.DatabaseSchema.ConnectionPoints
                .Find(cp => cp.UniqueIdentifier == this.RelationshipCreationHelper.StartingConnectionPointId);

            var newRelationship = _schemaObjectFactory.CreateNewRelationship(startingConnectionPoint);
            this.RelationshipCreationHelper.CurrentRelationship = newRelationship;
        }
        else if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.CloseCreation)
        {
            var endingConnectionPoint = this.DatabaseSchema.ConnectionPoints
                .Find(cp => cp.UniqueIdentifier == this.RelationshipCreationHelper.EndingConnectionPointId);

            _schemaObjectFactory.CloseNewRelationship(this.DatabaseSchema,
                this.RelationshipCreationHelper.CurrentRelationship,
                endingConnectionPoint,
                this.RelationshipCreationHelper.StartingConnectionPointId);
        }
    }

    #endregion

    #region brisanje objekata

    private async Task DeleteTable(int tableId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteTable(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteColumn(int tableId, int columnId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteColumn(this.DatabaseSchema, tableId, columnId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    public async Task DeleteIndex(int tableId, int indexId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);

        _schemaObjectFactory.DeleteIndexes(this.DatabaseSchema, tableId, indexId: indexId);

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteRelationship(int relationshipId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(this.DatabaseSchema, relationshipId: relationshipId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region spremanje/napuštanje sheme

    private void UpdateSchemaName(string name)
    {
        this.SchemaName = name;
    }

    private async Task SaveSchema()
    {
        var result = await _schemaPalApiService.SaveDatabaseSchema(new ExtendedSchemaRecord
        {
            Id = this.SchemaId,
            Name = this.SchemaName,
            SchemaJsonFormat = _jsonConverter.Serialize(this.DatabaseSchema)
        });

        var userMessage = string.Empty;
        if (result.IsSuccess)
        {
            this.SchemaId = result.Value;

            userMessage = "Uspješno ste spremili shemu.";
        }
        else
        {
            userMessage = await _resultProcessor.ProcessFailedResult(result);
        }

        OpenModalWindow(userMessage,
            EventCallback.Factory.Create(this, CloseModalWindow));
    }

    private void OnBackToHome()
    {
        OpenModalWindow(
            "Jeste li sigurni da želite napustiti stranicu?",
            EventCallback.Factory.Create(this, () => _navigationManager.NavigateTo("/")),
            windowButtonMode: ModalWindowButtonMode.AcceptCancel,
            onCancel: EventCallback.Factory.Create(this, CloseModalWindow));
    }

    #endregion
}