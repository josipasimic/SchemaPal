@page "/schema-maker"

@using SchemaPal.DataTransferObjects;
@using SchemaPal.Enums;
@using SchemaPal.Enums.EnumTranslators;
@using SchemaPal.Helpers.SchemaMakerHelpers;
@using SchemaPal.PageComponents.SchemaMakerComponents;
@using SchemaPal.PageComponents.SchemaMakerComponents.SidebarComponents;
@using SchemaPal.Services;

@inject NavigationManager _navigationManager;
@inject ISchemaObjectFactory _schemaObjectFactory;
@inject IStyleService _styleService;
@inject ISchemaPalApiService _schemaPalApiService;

<div class="layout-grid">
    <Sidebar
        Tables="this.DatabaseSchema.Tables"
        AddNewTable="AddNewTable"
        DeleteTable="DeleteTable"
        AddNewColumn="AddNewColumn"
        DeleteColumn="DeleteColumn"
        AddNewIndex="AddNewIndex"
        DeleteIndex="DeleteIndex"
        OnIndexColumnsUpdate="UpdateColumnsOnIndex"
        Relationships="this.DatabaseSchema.Relationships"
        DeleteRelationship="DeleteRelationship"
        OnUpdateState="StateHasChanged">
    </Sidebar>

    <CanvasContainer
        DatabaseSchema="this.DatabaseSchema"
        RelationshipCreationHelper="this.RelationshipCreationHelper"
        OnRelationshipDrawing="AddNewRelationship"
        OnUpdateState="StateHasChanged">
    </CanvasContainer>
</div>

@code {
    private DatabaseSchema DatabaseSchema = new DatabaseSchema();

    private RelationshipCreationHelper RelationshipCreationHelper = new RelationshipCreationHelper();

    // Napravi SchemaInjectionService koji će umetnuti gotove sheme u page, pa će ih page koristiti.
    protected async override void OnInitialized()
    {
        _schemaObjectFactory.Reset();

        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var schemaId = query["schemaId"];

        if (!string.IsNullOrEmpty(schemaId))
        {
            var isParsingSuccessful = int.TryParse(schemaId, out int schemaIdInt);
            if (isParsingSuccessful)
            {
                this.DatabaseSchema = await _schemaPalApiService.GetDatabaseSchema(schemaIdInt);
            }
        };
    }

    #region creating schema objects

    private async Task AddNewTable()
    {
        var newTableId = _schemaObjectFactory.CreateNewTable(this.DatabaseSchema);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Create,
            tableIds: new HashSet<int> { newTableId });

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNewColumn(int tableId)
    {
        _schemaObjectFactory.CreateNewColumn(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: new HashSet<int> { tableId });

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddNewIndex(int tableId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.CreateNewIndex(table);

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateColumnsOnIndex(List<int> selectedColumnIds, int tableId, int indexId)
    {
        if (selectedColumnIds is null
            || !selectedColumnIds.Any())
        {
            return;
        }

        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.UpdateColumnsOnIndex(table, indexId, selectedColumnIds);

        await InvokeAsync(StateHasChanged);
    }

    private void AddNewRelationship()
    {
        if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.StartCreation)
        {
            var startingConnectionPoint = this.DatabaseSchema.ConnectionPoints
                .Find(cp => cp.UniqueIdentifier == this.RelationshipCreationHelper.StartingConnectionPointId);

            var newRelationship = _schemaObjectFactory.CreateNewRelationship(startingConnectionPoint);
            this.RelationshipCreationHelper.CurrentRelationship = newRelationship;
        }
        else if (this.RelationshipCreationHelper.CreationMode == RelationshipCreationMode.CloseCreation)
        {
            var endingConnectionPoint = this.DatabaseSchema.ConnectionPoints
                .Find(cp => cp.UniqueIdentifier == this.RelationshipCreationHelper.EndingConnectionPointId);

            _schemaObjectFactory.CloseNewRelationship(this.DatabaseSchema,
                this.RelationshipCreationHelper.CurrentRelationship,
                endingConnectionPoint,
                this.RelationshipCreationHelper.StartingConnectionPointId);
        }
    }

    #endregion

    #region removing schema objects

    private async Task DeleteTable(int tableId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(this.DatabaseSchema, tableId: tableId);

        _schemaObjectFactory.DeleteTable(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteColumn(int tableId, int columnId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(
            this.DatabaseSchema, 
            tableId: tableId,
            columnId: columnId);

        _schemaObjectFactory.DeleteIndexes(this.DatabaseSchema, tableId, columnId: columnId);

        _schemaObjectFactory.DeleteColumn(this.DatabaseSchema, tableId, columnId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    public async Task DeleteIndex(int tableId, int indexId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);

        _schemaObjectFactory.DeleteIndexes(this.DatabaseSchema, tableId, indexId: indexId);

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteRelationship(int relationshipId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(this.DatabaseSchema, relationshipId: relationshipId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);

        await InvokeAsync(StateHasChanged);
    }

    #endregion
}