@page "/schemaMaker"

@using SchemaMakerEnums;
@using SchemaMakerHelpers;
@using SchemaMakerHelpers.EnumTranslators;
@using SchemaPal.DataTransferObjects;
@using SchemaPal.DataTransferObjects.Enums;
@using SchemaPal.Services;

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISchemaObjectFactory _schemaObjectFactory;
@inject IPositionService _positionService;
@inject IStyleService _styleService;

<div class="layout-grid">
    <div class="sidebar">
        <button class="btn back" @onclick="NavigateToMainMenu">&#129032 Natrag na glavni izbornik</button>
        <div class="expandable-row">
            <span>Tablice</span>
            <button class="btn large-bold-font" title="Dodaj novu tablicu" @onclick="AddNewTable">+</button>
            @if(ExpandMenuHelper.AreTablesExpanded)
            {
                <button class="btn expand" title="Sažmi" @onclick="ExpandMenuHelper.ToggleTablesExpanded">&#11165</button>
            }
            else
            {
                <button class="btn expand" title="Proširi" @onclick="ExpandMenuHelper.ToggleTablesExpanded">&#11167</button>
            }
        </div>

        @if (ExpandMenuHelper.AreTablesExpanded)
        {
            @foreach (var table in DatabaseSchema.Tables)
            {
                <div class="expanded-section">
                <div class="table-row">
                    <span class="name-label">Naziv:</span>
                    <input @bind="table.Name" class="name-input" />
                    <button class="btn large-bold-font" title="Obriši tablicu" @onclick="() => DeleteTable(table.Id)">&#128465</button>
                    @if (ExpandMenuHelper.ExpandedTableIds.Contains(table.Id))
                    {
                    <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleTableDetails(table.Id)">&#11165</button>
                    }
                    else
                    {
                    <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleTableDetails(table.Id)">&#11167</button>
                    }
                    </div>
                     
                    @if (ExpandMenuHelper.ExpandedTableIds.Contains(table.Id))
                    {
                        <div class="expanded-table-details">
                            <div class="expandable-row">
                                <span>Stupci</span>
                                <button class="btn large-bold-font" title="Dodaj novi stupac" @onclick="() => AddNewColumn(table.Id)" tip>+</button>
                                @if (ExpandMenuHelper.ExpandedColumnsTableIds.Contains(table.Id))
                                {
                                <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleColumnsExpanded(table.Id)">&#11165</button>
                                }
                                else
                                {
                                <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleColumnsExpanded(table.Id)">&#11167</button>
                                }
                            </div>

                            @if (ExpandMenuHelper.ExpandedColumnsTableIds.Contains(table.Id))
                            {
                                <div class="expanded-section">
                                    @foreach (var column in table.Columns)
                                    {
                                        <div class="column-row">
                                            <span class="name-label">Naziv:</span>
                                            <input @bind="column.Name" class="name-input" />
                                            <button class="btn large-bold-font" title="Obriši stupac" @onclick="() => DeleteColumn(table.Id, column.Id)">&#128465</button>
                                            @if (ExpandMenuHelper.ExpandedColumnIds.Contains(column.Id))
                                            {
                                                <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleColumnDetails(column.Id)">&#11165</button>
                                            }
                                            else
                                            {
                                                <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleColumnDetails(column.Id)">&#11167</button>
                                            }
                                        </div>

                                            @if (ExpandMenuHelper.ExpandedColumnIds.Contains(column.Id))
                                        {
                                            <div class="expanded-column-details">
                                                <div>
                                                    <span class="name-label">Vrsta podatka:</span>
                                                    <select class="dropdown" @bind="column.DataType">
                                                        @foreach (var dataType in Enum.GetValues(typeof(ColumnDataType)).Cast<ColumnDataType>())
                                                        {
                                                            <option value="@dataType">@ColumnDataTypeTranslator.MapToName(@dataType)</option>
                                                        }
                                                    </select>
                                                </div>
                                                <div>
                                                    <span class="name-label">Vrsta ključa:</span>
                                                    <select class="dropdown" @bind="column.KeyType">
                                                        @foreach (var keyType in Enum.GetValues(typeof(KeyType)).Cast<KeyType>())
                                                        {
                                                            <option value="@keyType">@KeyTypeTranslator.MapToName(@keyType)</option>
                                                        }
                                                    </select>
                                                </div>
                                                <div>
                                                    <span class="name-label">Dopusti NULL vrijednost</span>
                                                    <input class="checkbox" type="checkbox" @bind="column.IsNullable" />
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            }
                            <div class="expandable-row">
                                <span>Indeksi</span>
                                <button class="btn large-bold-font" title="Dodaj novi indeks" @onclick="() => AddNewIndex(table.Id)" tip>+</button>
                                @if (ExpandMenuHelper.ExpandedIndexTableIds.Contains(table.Id))
                                {
                                    <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleIndexExpanded(table.Id)">&#11165</button>
                                }
                                else
                                {
                                    <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleIndexExpanded(table.Id)">&#11167</button>
                                }
                            </div>
                            @if (ExpandMenuHelper.ExpandedIndexTableIds.Contains(table.Id))
                            {
                                <div class="expanded-section">
                                @foreach (var index in table.Indexes)
                                {
                                    <div class="column-row">
                                        <span class="name-label">Naziv:</span>
                                        <input @bind="index.Name" class="name-input" />
                                        <button class="btn large-bold-font" title="Obriši indeks" @onclick="() => DeleteIndex(table.Id, index.Id)">&#128465</button>
                                        @if (ExpandMenuHelper.ExpandedIndexIds.Contains(index.Id))
                                        {
                                            <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleIndexDetails(index.Id)">&#11165</button>
                                        }
                                        else
                                        {
                                            <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleIndexDetails(index.Id)">&#11167</button>
                                        }
                                    </div>

                                    @if (ExpandMenuHelper.ExpandedIndexIds.Contains(index.Id))
                                    {
                                        <div class="expanded-column-details">
                                            <div>
                                                <span class="name-label">Vrsta indeksa:</span>
                                                <select class="dropdown" @bind="index.Type">
                                                    @foreach (var dataType in Enum.GetValues(typeof(IndexType)).Cast<IndexType>())
                                                    {
                                                        <option value="@dataType">@IndexTypeTranslator.MapToName(@dataType)</option>
                                                    }
                                                </select>
                                            </div>
                                            <div>
                                                <span class="name-label">Vrsta ključa:</span>
                                                <select class="dropdown" @bind="index.KeyType">
                                                    @foreach (var keyType in Enum.GetValues(typeof(KeyType)).Cast<KeyType>())
                                                    {
                                                        <option value="@keyType">@KeyTypeTranslator.MapToName(@keyType)</option>
                                                    }
                                                </select>
                                            </div>
                                                <div>
                                                    <span class="name-label">Stupci:</span>
                                                    <CustomMultiSelectDropdown 
                                                        Options="@(table.Columns.Select(c => c.Id.ToString()).ToList())" 
                                                        OptionNames="@(table.Columns.Select(c => c.Name).ToList())"
                                                        OnSelectionChanged="@(selectedItems => UpdateColumnsOnIndex(selectedItems, table.Id, index.Id))" />
                                                </div>
                                        </div>
                                    }
                                }
                                </div>
                            }
                        </div>
                    }
            </div>
            }
        }
            
        <div class="expandable-row">
            <span>Veze</span>
            @if (ExpandMenuHelper.AreRelationshipsExpanded)
            {
                <button class="btn expand" title="Sažmi" @onclick="() => ExpandMenuHelper.ToggleRelationshipsExpanded()">&#11165</button>
            }
            else
            {
                <button class="btn expand" title="Proširi" @onclick="() => ExpandMenuHelper.ToggleRelationshipsExpanded()">&#11167</button>
            }
        </div>
        @if (ExpandMenuHelper.AreRelationshipsExpanded)
        {
            <div class="expanded-section">
                @foreach (var relationship in this.DatabaseSchema.Relationships)
                {
                    <div class="table-row">
                        <strong class="name-label">@GenerateRelationshipName(relationship.SourceTableId, relationship.DestinationTableId, relationship.SourceColumnId, relationship.DestinationColumnId)</strong>
                        <select class="dropdown" @bind="relationship.RelationshipType">
                            @foreach (var type in Enum.GetValues(typeof(RelationshipType)).Cast<RelationshipType>())
                            {
                                <option value="@type">@RelationshipTypeTranslator.MapToName(type)</option>
                            }
                        </select>
                        <button class="btn large-bold-font" title="Obriši vezu" @onclick="() => DeleteRelationship(relationship.Id)">&#128465</button>
                        <span class="name-label"></span>
                    </div>
                }
            </div>
        }
    </div>
    <div class="canvas-container"
         ondragover="event.preventDefault();"
         @ondrop="OnDrop">
        <div class="zoom-controls">
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.In)">
                <img style="width: 22px;" src="images/zoomIn.png" />
            </button>
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.Out)">                
                <img style="width: 20px;" src="images/zoomOut.png" />
            </button>
            <button class="btn" @onclick="ExportAsPng">
                <div style="height: 24px; width: 20px; font-size: 20px;">&#129035</div>
            </button>
        </div>
        <div class="canvas-content"
             style="transform: scale(@this.DatabaseSchema.ZoomLevel);">
            <div id="snapshot-content" style="height: 800px; width: 1500px;">
            <svg class="connection-lines">
                @foreach (var relationship in this.DatabaseSchema.Relationships)
                {
                    <g @key="relationship.Id">
                        <path id="@($"relationship_{relationship.Id}")"
                              d="M @relationship.X1 @relationship.Y1 
                                 L @relationship.MidX1 @relationship.MidY1 
                                 L @relationship.MidX2 @relationship.MidY2 
                                 L @relationship.X2 @relationship.Y2"/>

                        <text class="relationship-type">
                            <textPath href="@($"#relationship_{relationship.Id}")"
                                      startOffset="50%"
                                      text-anchor="middle">
                                @(RelationshipTypeTranslator.MapToName(relationship.RelationshipType))
                            </textPath>
                        </text>
                    </g>
                }
            </svg>
            @foreach (var table in this.DatabaseSchema.Tables)
            {
                <g key="table.Id">
                    <div class="table-wrapper" 
                         style="top: @table.TopPx; left: @table.LeftPx;">
                        <div class="connection-border">
                            @foreach (var connectionPoint in this.DatabaseSchema.ConnectionPoints.Where(cp => cp.TableId == table.Id))
                            {
                                <g @key="connectionPoint.UniqueIdentifier">
                                    <div class="connection-point"
                                         style="left: @connectionPoint.ConnectionPointLeftCoordinatePx; 
                                                top: @connectionPoint.ConnectionPointTopCoordinatePx; 
                                                background-color: @(this.DatabaseSchema.ConnectionPointColors.GetValueOrDefault(connectionPoint.UniqueIdentifier));"
                                         @onmouseover="() => SetConnectionPointColorOnMouseOver(connectionPoint.UniqueIdentifier)"
                                         @onmouseout="() => SetConnectionPointColorOnMouseOut(connectionPoint.UniqueIdentifier)"
                                         @onclick="() => OnConnectionPointClick(connectionPoint)"></div>
                                </g>
                            }
                        </div>

                        <div class="table"
                             style="width: @SchemaMakerConstants.TableWidthPx; 
                                    padding: @SchemaMakerConstants.TablePaddingPx; 
                                    font-size: @SchemaMakerConstants.TableFontSizePx; 
                                    opacity: @(this.RelationshipCreationAction.IsDrawingLine ? "0.6" : "1");"
                             draggable="@(this.RelationshipCreationAction.IsDrawingLine ? "false" : "true")"
                             @ondragstart="(e => OnTableDragStart(e, table.Id))">
                            <strong>@table.Name</strong>
                            @foreach (var column in table.Columns)
                            {
                                <div class="column"
                                     style="margin-top: @SchemaMakerConstants.ColumnTopMarginPx;  
                                            padding: @SchemaMakerConstants.ColumnPaddingPx; 
                                            font-size: @SchemaMakerConstants.ColumnFontSizePx;">
                                    <strong>@column.Name </strong>
                                    <span style="font-size: 13px; opacity: 0.8;">@column.ColumnProperties</span>
                                </div>
                            }
                            @foreach (var index in table.Indexes)
                            {
                                <div class="index"
                                     style="color: gray;">
                                    @index.FullIndexName
                                </div>
                            }
                        </div>
                    </div>
                </g>
            }
            </div>
        </div>
    </div>
</div>

@code {
    private DatabaseSchema DatabaseSchema = new DatabaseSchema();

    private ExpandMenuHelper ExpandMenuHelper = new ExpandMenuHelper();
    private DragAndDropHelper DragAndDropAction = new DragAndDropHelper();
    private RelationshipHelper RelationshipCreationAction = new RelationshipHelper();

    #region creating schema objects

    private void AddNewTable()
    {
        var newTableId = _schemaObjectFactory.CreateNewTable(this.DatabaseSchema);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Create,
            tableIds: new HashSet<int> { newTableId });
    }

    private void AddNewColumn(int tableId)
    {
        _schemaObjectFactory.CreateNewColumn(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Create,
            tableIds: new HashSet<int> { tableId });
    }

    private void AddNewIndex(int tableId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.CreateNewIndex(table);
    }

    private void UpdateColumnsOnIndex(List<string> selectedDropdownValues, int tableId, int indexId)
    {
        if (selectedDropdownValues is null)
        {
            return;
        }

        var convertedSelectedColumnIds = selectedDropdownValues
            .Select(ci => int.Parse(ci))
            .ToList();

        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);
        _schemaObjectFactory.UpdateColumnsOnIndex(table, indexId, convertedSelectedColumnIds);
    }

    private string GenerateRelationshipName(int sourceTableId, 
        int destinationTableId, 
        int sourceColumnId, 
        int destinationColumnId)
    {
        var sourceTable = this.DatabaseSchema.Tables.Find(t => t.Id == sourceTableId);
        var sourceColumnName = sourceTable?.Columns?.Find(c => c.Id == sourceColumnId)?.Name ?? string.Empty;

        var destinationTable = this.DatabaseSchema.Tables.Find(t => t.Id == destinationTableId);
        var destinationColumnName = destinationTable?.Columns?.Find(c => c.Id == destinationColumnId)?.Name ?? string.Empty;

        return $"{sourceColumnName} - {destinationColumnName}";
    }

    #endregion

    #region removing schema objects

    private void DeleteTable(int tableId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(this.DatabaseSchema, tableId: tableId);

        _schemaObjectFactory.DeleteTable(this.DatabaseSchema, tableId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);
    }

    private void DeleteColumn(int tableId, int columnId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(
            this.DatabaseSchema, 
            tableId: tableId,
            columnId: columnId);

        _schemaObjectFactory.DeleteIndexes(this.DatabaseSchema, tableId, columnId: columnId);

        _schemaObjectFactory.DeleteColumn(this.DatabaseSchema, tableId, columnId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);
    }

    public void DeleteIndex(int tableId, int indexId)
    {
        var table = this.DatabaseSchema.Tables.Find(t => t.Id == tableId);

        _schemaObjectFactory.DeleteIndexes(this.DatabaseSchema, tableId, indexId: indexId);
    }

    private void DeleteRelationship(int relationshipId)
    {
        var affectedTableIds = _schemaObjectFactory.DeleteRelationships(this.DatabaseSchema, relationshipId: relationshipId);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: affectedTableIds);
    }

    #endregion

    #region zooming

    private void Zoom(ZoomDirection zoomDirection)
    {
        var stepSign = zoomDirection == ZoomDirection.In ? 1 : -1;

        this.DatabaseSchema.ZoomLevel = Math.Clamp(
            this.DatabaseSchema.ZoomLevel + stepSign * SchemaMakerConstants.ZoomLevelStep,
            SchemaMakerConstants.MinimalZoomLevel, 
            SchemaMakerConstants.MaximalZoomLevel); 
    }

    #endregion

    #region drag and drop table

    private void OnTableDragStart(DragEventArgs e, int tableId)
    {
        if (this.RelationshipCreationAction.IsDrawingLine)
        {
            return;
        }

        this.DragAndDropAction.TableId = tableId;
        this.DragAndDropAction.StartingClientX = e.ClientX;
        this.DragAndDropAction.StartingClientY = e.ClientY;
    }

    private void OnDrop(DragEventArgs e)
    {
        if (this.RelationshipCreationAction.IsDrawingLine)
        {
            return;
        }

        var droppedTableId = this.DragAndDropAction.TableId;

        _positionService.UpdateTableCoordinates(
            this.DatabaseSchema, 
            droppedTableId,
            (this.DragAndDropAction.StartingClientX, this.DragAndDropAction.StartingClientY),
            (e.ClientX, e.ClientY));

        _positionService.UpdateRelationshipPositions(this.DatabaseSchema, tableIds: new HashSet<int> { droppedTableId });

        var connectedTableIds = this.DatabaseSchema.Relationships
            .Where(r => r.SourceTableId == droppedTableId || r.DestinationTableId == droppedTableId)
            .SelectMany(r => new[] { r.SourceTableId, r.DestinationTableId })
            .ToHashSet();

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: connectedTableIds);

        this.DragAndDropAction.Reset();
        StateHasChanged();
    }

    #endregion

    #region create relationships

    private void OnConnectionPointClick(ConnectionPoint connectionPoint)
    {
        if (!this.RelationshipCreationAction.IsDrawingLine)
        {
            var newRelationship = _schemaObjectFactory.CreateNewRelationship(connectionPoint);

            this.RelationshipCreationAction.IsDrawingLine = true;
            this.RelationshipCreationAction.StartingConnectionPointId = connectionPoint.UniqueIdentifier;
            this.RelationshipCreationAction.CurrentRelationship = newRelationship;

            _styleService.SetConnectionPointsColor(this.DatabaseSchema, 
                ConnectionPointColorEvent.Select,
                connectionPointIds: new List<string> { connectionPoint.UniqueIdentifier });
        }
        else
        {
            _schemaObjectFactory.CloseNewRelationship(this.DatabaseSchema,
                this.RelationshipCreationAction.CurrentRelationship,
                connectionPoint,
                this.RelationshipCreationAction.StartingConnectionPointId);

            var connectedTableIds = new HashSet<int>
            {
                this.RelationshipCreationAction.CurrentRelationship.SourceTableId,
                this.RelationshipCreationAction.CurrentRelationship.DestinationTableId
            };

            _positionService.UpdateRelationshipPositions(this.DatabaseSchema, tableIds: connectedTableIds);

            _styleService.SetConnectionPointsColor(this.DatabaseSchema,
                ConnectionPointColorEvent.Reset,
                tableIds: connectedTableIds);

            this.RelationshipCreationAction.Reset();
        }

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOver(string connectionPointId)
    {
        if (this.RelationshipCreationAction.IsDrawingLine
            && this.RelationshipCreationAction.StartingConnectionPointId.Equals(connectionPointId, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Select,
            connectionPointIds: new List<string> { connectionPointId });

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOut(string connectionPointId)
    {
        if (this.RelationshipCreationAction.IsDrawingLine
            && this.RelationshipCreationAction.StartingConnectionPointId.Equals(connectionPointId, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            connectionPointIds: new List<string> { connectionPointId });

        StateHasChanged();
    }

    #endregion

    private async Task NavigateToMainMenu()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Jeste li sigurni da želite napustiti stranicu?");
        if (confirm)
        {
            _schemaObjectFactory.Reset();
            Navigation.NavigateTo("/");
        }
    }

    private async Task ExportAsPng()
    {
        await JSRuntime.InvokeVoidAsync("exportDivToPng", "snapshot-content");
    }
}