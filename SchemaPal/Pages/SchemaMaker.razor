@page "/schemaMaker"

@using SchemaMakerEnums;
@using SchemaMakerHelpers;
@using SchemaPal.DataTransferObjects;
@using SchemaPal.DataTransferObjects.Enums;
@using SchemaPal.Services;

@inject ISchemaObjectFactory _schemaObjectFactory;
@inject IPositionService _positionService;
@inject IStyleService _styleService;

<div class="layout-grid">
    <div class="sidebar">
        <button class="btn btn-primary" 
                @onclick="AddNewTable">Dodaj novu tablicu</button>
    </div>
    <div class="canvas-container"
         ondragover="event.preventDefault();"
         @ondrop="OnDrop">
        <div class="zoom-controls">
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.In)">+</button>
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.Out)">-</button>
        </div>
        <div class="canvas-content"
             style="transform: scale(@this.DatabaseSchema.ZoomLevel);">
            <svg class="connection-lines">
                @foreach (var relationship in this.DatabaseSchema.Relationships)
                {
                    <g @key="relationship.Id">
                        <path id="@($"relationship_{relationship.Id}")"
                              d="M @relationship.X1 @relationship.Y1 
                                 L @relationship.MidX1 @relationship.MidY1 
                                 L @relationship.MidX2 @relationship.MidY2 
                                 L @relationship.X2 @relationship.Y2"/>

                        <text class="relationship-type">
                            <textPath href="@($"#relationship_{relationship.Id}")"
                                      startOffset="50%"
                                      text-anchor="middle">
                                @(RelationshipTypeTranslator.MapToTagText(relationship.RelationshipType))
                            </textPath>
                        </text>
                    </g>
                }
            </svg>
            @foreach (var table in this.DatabaseSchema.Tables)
            {
                <g key="table.Id">
                    <div class="table-wrapper" 
                         style="top: @table.TopPx; left: @table.LeftPx;">
                        <div class="connection-border">
                            @foreach (var connectionPoint in this.DatabaseSchema.ConnectionPoints.Where(cp => cp.TableId == table.Id))
                            {
                                <g @key="connectionPoint.UniqueIdentifier">
                                    <div class="connection-point"
                                         style="left: @connectionPoint.ConnectionPointLeftCoordinatePx; 
                                                top: @connectionPoint.ConnectionPointTopCoordinatePx; 
                                                background-color: @(this.DatabaseSchema.ConnectionPointColors.GetValueOrDefault(connectionPoint.UniqueIdentifier));"
                                         @onmouseover="() => SetConnectionPointColorOnMouseOver(connectionPoint.UniqueIdentifier)"
                                         @onmouseout="() => SetConnectionPointColorOnMouseOut(connectionPoint.UniqueIdentifier)"
                                         @onclick="() => OnConnectionPointClick(connectionPoint)"></div>
                                </g>
                            }
                        </div>

                        <div class="table"
                             style="width: @SchemaMakerConstants.TableWidthPx; 
                                    padding: @SchemaMakerConstants.TablePaddingPx; 
                                    font-size: @SchemaMakerConstants.TableFontSizePx; 
                                    opacity: @(this.RelationshipCreationAction.IsDrawingLine ? "0.6" : "1");"
                             draggable="@(this.RelationshipCreationAction.IsDrawingLine ? "false" : "true")"
                             @ondragstart="(e => OnTableDragStart(e, table.Id))">
                            <strong>@table.Name</strong>
                            @foreach (var column in table.Columns)
                            {
                                <div class="column"
                                     style="margin-top: @SchemaMakerConstants.ColumnTopMarginPx;  
                                            padding: @SchemaMakerConstants.ColumnPaddingPx; 
                                            font-size: @SchemaMakerConstants.ColumnFontSizePx;">
                                    @column.Name
                                </div>
                            }
                        </div>
                    </div>
                </g>
            }
        </div>
    </div>
</div>

@code {
    private DatabaseSchema DatabaseSchema = new DatabaseSchema();

    private DragAndDropHelper DragAndDropAction = new DragAndDropHelper();
    private RelationshipHelper RelationshipCreationAction = new RelationshipHelper();

    #region new object creation

    private void AddNewTable()
    {
        var newTableId = _schemaObjectFactory.CreateNewTable(this.DatabaseSchema);

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Create,
            tableIds: new HashSet<int> { newTableId });
    }

    #endregion

    #region zooming

    private void Zoom(ZoomDirection zoomDirection)
    {
        var stepSign = zoomDirection == ZoomDirection.In ? 1 : -1;

        this.DatabaseSchema.ZoomLevel = Math.Clamp(
            this.DatabaseSchema.ZoomLevel + stepSign * SchemaMakerConstants.ZoomLevelStep,
            SchemaMakerConstants.MinimalZoomLevel, 
            SchemaMakerConstants.MaximalZoomLevel); 
    }

    #endregion

    #region drag and drop table

    private void OnTableDragStart(DragEventArgs e, int tableId)
    {
        // Drag and drop tablica ne dozvoljavamo ako je crtanje veze između dva stupca u tijeku.
        if (this.RelationshipCreationAction.IsDrawingLine)
        {
            return;
        }

        this.DragAndDropAction.TableId = tableId;
        this.DragAndDropAction.StartingClientX = e.ClientX;
        this.DragAndDropAction.StartingClientY = e.ClientY;
    }

    private void OnDrop(DragEventArgs e)
    {
        // Drag and drop tablica ne dozvoljavamo ako je crtanje veze između dva stupca u tijeku.
        if (this.RelationshipCreationAction.IsDrawingLine)
        {
            return;
        }

        var droppedTableId = this.DragAndDropAction.TableId;

        _positionService.UpdateTableCoordinates(
            this.DatabaseSchema, 
            droppedTableId,
            (this.DragAndDropAction.StartingClientX, this.DragAndDropAction.StartingClientY),
            (e.ClientX, e.ClientY));

        _positionService.UpdateRelationshipPositions(this.DatabaseSchema, tableIds: new HashSet<int> { droppedTableId });

        var connectedTableIds = this.DatabaseSchema.Relationships
            .Where(r => r.SourceTableId == droppedTableId || r.DestinationTableId == droppedTableId)
            .SelectMany(r => new[] { r.SourceTableId, r.DestinationTableId })
            .ToHashSet();

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            tableIds: connectedTableIds);

        this.DragAndDropAction.Reset();
        StateHasChanged();
    }

    #endregion

    #region create relationships

    private void OnConnectionPointClick(ConnectionPoint connectionPoint)
    {
        if (!this.RelationshipCreationAction.IsDrawingLine)
        {
            var newRelationship = _schemaObjectFactory.CreateNewRelationship(connectionPoint);

            this.RelationshipCreationAction.IsDrawingLine = true;
            this.RelationshipCreationAction.StartingConnectionPointId = connectionPoint.UniqueIdentifier;
            this.RelationshipCreationAction.CurrentRelationship = newRelationship;

            _styleService.SetConnectionPointsColor(this.DatabaseSchema, 
                ConnectionPointColorEvent.Select,
                connectionPointIds: new List<string> { connectionPoint.UniqueIdentifier });
        }
        else
        {
            _schemaObjectFactory.CloseNewRelationship(this.DatabaseSchema,
                this.RelationshipCreationAction.CurrentRelationship,
                connectionPoint,
                this.RelationshipCreationAction.StartingConnectionPointId);

            var connectedTableIds = new HashSet<int>
            {
                this.RelationshipCreationAction.CurrentRelationship.SourceTableId,
                this.RelationshipCreationAction.CurrentRelationship.DestinationTableId
            };

            _positionService.UpdateRelationshipPositions(this.DatabaseSchema, tableIds: connectedTableIds);

            _styleService.SetConnectionPointsColor(this.DatabaseSchema,
                ConnectionPointColorEvent.Reset,
                tableIds: connectedTableIds);

            this.RelationshipCreationAction.Reset();
        }

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOver(string connectionPointId)
    {
        // Ne želimo mijenjati boju točke ako je crtanje veze u tijeku iz te točke.
        if (this.RelationshipCreationAction.IsDrawingLine
            && this.RelationshipCreationAction.StartingConnectionPointId.Equals(connectionPointId, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Select,
            connectionPointIds: new List<string> { connectionPointId });

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOut(string connectionPointId)
    {
        // Ne želimo mijenjati boju točke ako je crtanje veze u tijeku iz te točke.
        if (this.RelationshipCreationAction.IsDrawingLine
            && this.RelationshipCreationAction.StartingConnectionPointId.Equals(connectionPointId, StringComparison.Ordinal))
        {
            return;
        }

        _styleService.SetConnectionPointsColor(this.DatabaseSchema,
            ConnectionPointColorEvent.Reset,
            connectionPointIds: new List<string> { connectionPointId });

        StateHasChanged();
    }

    #endregion
}