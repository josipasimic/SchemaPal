@page "/schemaMaker"

@using SchemaMakerEnums;
@using SchemaMakerHelpers;
@using SchemaPal.DataTransferObjects;
@using SchemaPal.DataTransferObjects.Enums;
@using SchemaPal.Services;

@inject ISchemaObjectFactory _schemaObjectFactory;
@inject IPositionService _positionService;

<div class="layout-grid">
    <div class="sidebar">
        <button class="btn btn-primary" 
            @onclick="AddNewTable">Dodaj novu tablicu</button>
    </div>
    <div class="canvas-container"
         ondragover="event.preventDefault();"
         @ondrop="OnDrop">
        <div class="zoom-controls">
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.In)">+</button>
            <button class="btn btn-secondary" @onclick="() => Zoom(ZoomDirection.Out)">-</button>
        </div>
        <div class="canvas-content"
             style="transform: scale(@DatabaseSchema.ZoomLevel);">
            <svg class="connection-lines">
                @foreach (var relationship in DatabaseSchema.Relationships)
                {
                    <g @key="relationship.Id">
                        <path id="@($"relationship_{relationship.Id}")"
                              d="M @relationship.X1 @relationship.Y1 L @relationship.MidX1 @relationship.MidY1 L @relationship.MidX2 @relationship.MidY2 L @relationship.X2 @relationship.Y2"/>

                        <text class="relationship-type">
                            <textPath href="@($"#relationship_{relationship.Id}")"
                                      startOffset="50%"
                                      text-anchor="middle">
                                @(RelationshipTypeTranslator.MapToTagText(relationship.RelationshipType))
                            </textPath>
                        </text>
                    </g>
                }
            </svg>
            @foreach (var table in DatabaseSchema.Tables)
            {
                <div class="table-wrapper" 
                    style="top: @table.TopPx; left: @table.LeftPx;">
                    <div class="connection-border">
                        @foreach (var connectionPoint in DatabaseSchema.ConnectionPoints.Where(cp => cp.TableId == table.Id))
                        {
                            <g @key="connectionPoint.UniqueIdentifier">
                                <div class="connection-point"
                                     style="left: @connectionPoint.ConnectionPointLeftCoordinatePx; top: @connectionPoint.ConnectionPointTopCoordinatePx; background-color: @(DatabaseSchema.ConnectionPointColors.GetValueOrDefault(connectionPoint.UniqueIdentifier));"
                                     @onmouseover="() => SetConnectionPointColorOnMouseOver(connectionPoint)"
                                     @onmouseout="() => SetConnectionPointColorOnMouseOut(connectionPoint)"
                                     @onclick="() => OnConnectionPointClick(connectionPoint)"></div>
                            </g>
                        }
                    </div>

                    <div class="table"
                        style="width: @SchemaMakerConstants.TableWidthPx; padding: @SchemaMakerConstants.TablePaddingPx; font-size: @SchemaMakerConstants.TableFontSizePx; opacity: @(RelationshipColumnsData.IsDrawingLine ? "0.6" : "1");"
                        draggable="@(!RelationshipColumnsData.IsDrawingLine ? "true" : "false")"
                        @ondragstart="(e => OnTableDragStart(e, table.Id))">
                        <strong>@table.Name</strong>
                        @foreach (var column in table.Columns)
                        {
                            <div class="column"
                                 style="margin-top: @SchemaMakerConstants.ColumnTopMarginPx;  padding: @SchemaMakerConstants.ColumnPaddingPx; font-size: @SchemaMakerConstants.ColumnFontSizePx;">
                                @column.Name
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private DatabaseSchema DatabaseSchema = new DatabaseSchema();

    private DragAndDropHelper DragAndDropTableData = new DragAndDropHelper();
    private RelationshipHelper RelationshipColumnsData = new RelationshipHelper();

    #region new object creation

    private void AddNewTable()
    {
        _schemaObjectFactory.CreateNewTable(this.DatabaseSchema);
    }

    #endregion

    #region zooming

    private void Zoom(ZoomDirection zoomDirection)
    {
        var stepSign = zoomDirection == ZoomDirection.In ? 1 : -1;

        DatabaseSchema.ZoomLevel = Math.Clamp(
            DatabaseSchema.ZoomLevel + stepSign * SchemaMakerConstants.ZoomLevelStep,
            SchemaMakerConstants.MinimalZoomLevel, 
            SchemaMakerConstants.MaximalZoomLevel); 
    }

    #endregion

    #region drag and drop table

    private void OnTableDragStart(DragEventArgs e, int tableId)
    {
        // Drag and drop tablica ne dozvoljavamo ako je crtanje veze između dva stupca u tijeku.
        if (RelationshipColumnsData.IsDrawingLine)
        {
            return;
        }

        DragAndDropTableData.TableId = tableId;
        DragAndDropTableData.StartingClientX = e.ClientX;
        DragAndDropTableData.StartingClientY = e.ClientY;
    }

    private void OnDrop(DragEventArgs e)
    {
        // Drag and drop tablica ne dozvoljavamo ako je crtanje veze između dva stupca u tijeku.
        if (RelationshipColumnsData.IsDrawingLine)
        {
            return;
        }

        _positionService.UpdateTableCoordinates(
            DatabaseSchema, 
            DragAndDropTableData, 
            (e.ClientX, e.ClientY));

        var droppedTableId = DragAndDropTableData.TableId;

        _positionService.UpdateRelationshipPositions(DatabaseSchema, tableIds: new List<int> { droppedTableId });
        UpdateTableConnectionPointColorsOnTableDrop(droppedTableId);

        DragAndDropTableData.Reset();
        StateHasChanged();
    }

    private void UpdateTableConnectionPointColorsOnTableDrop(int tableId)
    {
        var tableRelationships = DatabaseSchema.Relationships
            .Where(r => r.SourceTableId == tableId || r.DestinationTableId == tableId)
            .ToList();

        var connectedConnectionPoints = tableRelationships
            .SelectMany(r => new[] { r.ConnectionPointIds.Start, r.ConnectionPointIds.End })
            .Distinct()
            .ToList();

        var affectedTableIds = tableRelationships
            .SelectMany(r => new[] { r.SourceTableId, r.DestinationTableId })
            .ToHashSet();

        var tableConnectionPoints = DatabaseSchema.ConnectionPoints
            .Where(cp => affectedTableIds.Contains(cp.TableId))
            .ToList();

        foreach (var connectionPointColor in tableConnectionPoints)
        {
            if (connectedConnectionPoints.Contains(connectionPointColor.UniqueIdentifier))
            {
                DatabaseSchema.ConnectionPointColors[connectionPointColor.UniqueIdentifier] = SchemaMakerConstants.ConnectedConnectionPointColor;

                continue;
            }

            DatabaseSchema.ConnectionPointColors[connectionPointColor.UniqueIdentifier] = SchemaMakerConstants.DefaultConnectionPointColor;
        }
    }

    #endregion

    #region create relationships

    private void OnConnectionPointClick(ConnectionPoint connectionPoint)
    {
        if (!RelationshipColumnsData.IsDrawingLine)
        {
            var newRelationship = _schemaObjectFactory.CreateNewRelationship(connectionPoint, DatabaseSchema.ConnectionPointColors);

            RelationshipColumnsData.IsDrawingLine = true;
            RelationshipColumnsData.StartingConnectionPointId = connectionPoint.UniqueIdentifier;
            RelationshipColumnsData.CurrentRelationship = newRelationship;
        }
        else
        {
            _schemaObjectFactory.CloseNewRelationship(DatabaseSchema,
                RelationshipColumnsData.CurrentRelationship,
                connectionPoint,
                RelationshipColumnsData.StartingConnectionPointId);
            
            var tableIdsForRelationshipPositionUpdate = new List<int>
            {
                RelationshipColumnsData.CurrentRelationship.SourceTableId,
                RelationshipColumnsData.CurrentRelationship.DestinationTableId
            };
            _positionService.UpdateRelationshipPositions(DatabaseSchema, tableIds: tableIdsForRelationshipPositionUpdate);

            RelationshipColumnsData.Reset();
        }

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOver(ConnectionPoint connectionPoint)
    {
        // Ne želimo mijenjati boju točke ako je crtanje veze u tijeku iz te točke.
        if (RelationshipColumnsData.IsDrawingLine
            && RelationshipColumnsData.StartingConnectionPointId.Equals(connectionPoint.UniqueIdentifier, StringComparison.Ordinal))
        {
            return;
        }

        DatabaseSchema.ConnectionPointColors[connectionPoint.UniqueIdentifier] = SchemaMakerConstants.SelectedConnectionPointColor;

        StateHasChanged();
    }

    private void SetConnectionPointColorOnMouseOut(ConnectionPoint connectionPoint)
    {
        // Ne želimo mijenjati boju točke ako je crtanje veze u tijeku iz te točke.
        if (RelationshipColumnsData.IsDrawingLine
            && RelationshipColumnsData.StartingConnectionPointId.Equals(connectionPoint.UniqueIdentifier, StringComparison.Ordinal))
        {
            return;
        }

        var isConnectionPointWithinRelationship = DatabaseSchema.Relationships
            .Any(x => x.ConnectionPointIds.Start.Equals(connectionPoint.UniqueIdentifier, StringComparison.Ordinal)
                || x.ConnectionPointIds.End.Equals(connectionPoint.UniqueIdentifier, StringComparison.Ordinal));

        DatabaseSchema.ConnectionPointColors[connectionPoint.UniqueIdentifier] = isConnectionPointWithinRelationship
            ? SchemaMakerConstants.ConnectedConnectionPointColor
            : SchemaMakerConstants.DefaultConnectionPointColor;

        StateHasChanged();
    }

    #endregion
}